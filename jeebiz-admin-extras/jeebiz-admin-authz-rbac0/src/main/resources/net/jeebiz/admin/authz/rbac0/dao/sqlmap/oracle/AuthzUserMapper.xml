<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.jeebiz.admin.authz.rbac0.dao.IAuthzUserDao">
	
	<!-- 开启二级缓存 -->
	<cache-ref namespace="net.jeebiz.admin.authz.rbac0.dao.IAuthzRoleDao"/>
	
	<resultMap id="UserMap" type="AuthzUserModel">
		<!-- 用户ID -->
		<result property="id" column="U_ID" />
		<!-- 用户唯一ID（用户信息表ID） -->
		<result property="uid" column="U_UID" />
		<!-- 用户唯一编号（工号） -->
		<result property="ucode" column="U_CODE" />
		<!-- 用户名称 -->
        <result property="username" column="U_USERNAME"/>
        <!-- 用户密码 -->
        <result property="password" column="U_PASSWORD"/>
        <!-- 用户密码盐：用于密码加解密 -->
        <result property="salt" column="U_SALT"/>
        <!-- 用户秘钥：用于用户JWT加解密 -->
        <result property="secret" column="U_SECRET"/>
        <!-- 用户别名（昵称） -->
        <result property="alias" column="U_ALIAS"/>
        <!-- 用户头像：图片路径或图标样式  -->
		<result property="avatar" column="U_AVATAR" />
        <!-- 手机号码 -->
        <result property="phone" column="U_PHONE"/>
        <!-- 电子邮箱 -->
        <result property="email" column="U_EMAIL"/>
        <!-- 性别：（male：男，female：女） -->
        <result property="gender" column="U_GENDER" />
        <!-- 出生日期 -->
		<result property="birthday" column="U_BIRTHDAY" />
		<!-- 身份证号码 -->
		<result property="idcard" column="U_IDCARD" />
		<!-- 用户备注 -->
		<result property="remark" column="U_REMARK" />
        <!-- 用户状态(0:不可用|1:正常|2:锁定) -->
        <result property="status" column="U_STATUS"/>
        <!-- 初始化时间 -->
        <result property="time24" column="U_TIME24"/>
        <!-- 角色ID（可能多个组合，如：1,2） -->
		<result property="roleId" column="R_ID" />
		<!-- 角色名称（可能多个组合，如：角色1,角色2） -->
		<result property="roleName" column="R_NAME" />
		<!-- 角色信息 -->
		<collection property="roleList" column="{uid=U_ID}" select="getRoleList"></collection>
	</resultMap>
	
	<resultMap id="RoleMap" type="AuthzRoleModel">
		<!-- 角色ID -->
		<result property="id" column="R_ID" />
		<!-- 角色编码 -->
		<result property="key" column="R_KEY" />
		<!-- 角色名称 -->
		<result property="name" column="R_NAME" />
		<!-- 角色类型（1:原生|2:继承|3:复制|4:自定义） -->
		<result property="type" column="R_TYPE" />
		<!-- 角色简介 -->
		<result property="intro" column="R_INTRO" />
		<!-- 角色状态（0:禁用|1:可用） -->
		<result property="status" column="R_STATUS" />
		<!-- 角色已分配用户量 -->
		<result property="users" column="R_USERS" />
		<!-- 初始化时间 -->
		<result property="time24" column="R_TIME24" />
	</resultMap>
	
	<resultMap id="PairMap" type="PairModel">
		<result property="key" column="R_ID" />
		<result property="value" column="R_NAME" />
	</resultMap>
	
	<insert id="insert" parameterType="AuthzUserModel" flushCache="true">
		<selectKey keyProperty="id" order="BEFORE" resultType="String">  
	        SELECT sys_guid() FROM dual
	    </selectKey>
	    INSERT INTO SYS_AUTHZ_USER_LIST(U_ID,U_USERNAME,U_ALIAS,U_SALT,U_PASSWORD,U_AVATAR,U_PHONE,U_EMAIL,U_GENDER,U_BIRTHDAY,U_IDCARD,U_UID,U_CODE,U_REMARK,U_STATUS)
		VALUES(#{id},#{username},#{alias},#{salt},#{password},#{avatar,jdbcType=VARCHAR},#{phone},#{email,jdbcType=VARCHAR},#{gender,jdbcType=VARCHAR},#{birthday,jdbcType=VARCHAR},
		#{idcard,jdbcType=VARCHAR},#{uid,jdbcType=VARCHAR},#{ucode,jdbcType=VARCHAR},#{remark,jdbcType=CLOB},'1')
	</insert>
	
	<delete id="delete" parameterType="java.lang.String" flushCache="true">
		DELETE FROM SYS_AUTHZ_USER_LIST WHERE U_ID = #{id} AND U_USERNAME != 'admin'
	</delete>
	
	<delete id="deleteRole" flushCache="true">
    	DELETE FROM SYS_AUTHZ_USER_ROLE_RELATION WHERE U_ID = #{id} AND R_KEY != 'admin'
    </delete>
    
    <delete id="batchDelete" flushCache="true">
		DELETE FROM SYS_AUTHZ_USER_LIST WHERE U_USERNAME != 'admin' AND U_ID IN 
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
           #{item} 
        </foreach>
	</delete>
	
	<delete id="batchDeleteRole" flushCache="true">
		DELETE FROM SYS_AUTHZ_USER_ROLE_RELATION WHERE U_USERNAME != 'admin' AND U_ID IN 
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
           #{item} 
        </foreach>
	</delete>
	
	<update id="update" parameterType="AuthzUserModel" flushCache="true">
		update SYS_AUTHZ_USER_LIST t
		<set>
			<if test="alias != null and alias != ''">t.U_ALIAS = #{alias},</if>
			<if test="avatar != null and avatar != ''">t.U_AVATAR = #{avatar},</if>
			<if test="phone != null and phone != ''">t.U_PHONE = #{phone},</if>
			<if test="email != null and email != ''">t.U_EMAIL = #{email},</if>
			<if test="gender != null and gender != ''">t.D_GENDER = #{gender},</if>
			<if test="birthday != null and birthday != ''">t.D_BIRTHDAY = #{birthday},</if>
			<if test="idcard != null and idcard != ''">t.D_IDCARD = #{idcard},</if>
			<if test="ucode != null and ucode != ''">t.U_CODE = #{ucode},</if>
			<if test="status != null and status != ''">t.U_STATUS = #{status},</if>
			<if test="remark != null and remark != ''">t.U_REMARK = #{remark}</if>
		</set>
		where t.U_ID = #{id}
	</update>
	
	<update id="updateRole" parameterType="AuthzUserModel" flushCache="true">
    	update SYS_AUTHZ_USER_ROLE_RELATION set R_ID = #{roleId} WHERE U_ID = #{id} AND R_KEY != 'admin'
    </update>
    
	<update id="updatePwd" parameterType="java.lang.String" flushCache="true">
		update SYS_AUTHZ_USER_LIST t 
		   set t.U_PASSWORD = #{password}
		where t.U_ID = #{userId}
	</update>
	
	<update id="resetPwd" parameterType="java.lang.String" flushCache="true">
		update SYS_AUTHZ_USER_LIST t 
		   set t.U_PASSWORD = #{password}
		where t.U_ID = #{userId} and t.U_PASSWORD = #{oldPassword}
	</update>
	
	<update id="setStatus" parameterType="java.lang.String" flushCache="true">
		UPDATE SYS_AUTHZ_USER_LIST t
		   SET t.U_STATUS = #{status}
		 WHERE t.U_ID = #{userId}
	</update>
	
	<select id="getCountByPhone" resultType="int" parameterType="java.lang.String" useCache="false">
		SELECT count(t.U_ID) FROM SYS_AUTHZ_USER_LIST t WHERE t.U_PHONE = #{phone}
	</select>

	<select id="getCountByEmail" resultType="int" parameterType="java.lang.String" useCache="false">
		SELECT count(t.U_ID) FROM SYS_AUTHZ_USER_LIST t WHERE t.U_PHONE = #{email}
	</select>

	<select id="getCountUpdateByPhone" resultType="int" useCache="false">
		SELECT count(t.U_ID) FROM SYS_AUTHZ_USER_LIST t WHERE t.U_PHONE = #{phone} AND t.U_ID != #{id}
	</select>

	<select id="getCountUpdateByEmail" resultType="int" useCache="false">
		SELECT count(t.U_ID) FROM SYS_AUTHZ_USER_LIST t WHERE t.U_PHONE = #{email} AND t.U_ID != #{id}
	</select>

	<select id="getCountByRoleId" resultType="int" parameterType="java.lang.String" useCache="false">
		SELECT count(t.U_ID) FROM SYS_AUTHZ_USER_ROLE_RELATION t WHERE t.R_ID = #{roleId} AND t.U_ID = #{userId}
	</select>
	
	<select id="getUserByUid" resultMap="UserMap" parameterType="java.lang.String" useCache="false">
		SELECT
			t.U_ID,
			t.U_UID,
			t.U_CODE,
			t.U_USERNAME,
			'******' AS U_PASSWORD,
			'******' AS U_SALT,
			'******' AS U_SECRET,
			t.U_ALIAS,
			t.U_AVATAR,
			t.U_PHONE,
			t.U_EMAIL,
			t.U_GENDER,
			t.U_BIRTHDAY,
			t.U_IDCARD,
			t.U_REMARK,
			t.U_STATUS,
			t.U_TIME24
		FROM SYS_AUTHZ_USER_LIST t
	   WHERE t.U_ID = #{id}
	</select>
	
	<select id="getModel" resultMap="UserMap" parameterType="java.lang.String" useCache="true">
		SELECT
			t.U_ID,
			t.U_UID,
			t.U_CODE,
			t.U_USERNAME,
			'******' AS U_PASSWORD,
			'******' AS U_SALT,
			'******' AS U_SECRET,
			t.U_ALIAS,
			t.U_AVATAR,
			t.U_PHONE,
			t.U_EMAIL,
			t.U_GENDER,
			t.U_BIRTHDAY,
			t.U_IDCARD,
			t.U_REMARK,
			t.U_STATUS,
			t.U_TIME24
		FROM SYS_AUTHZ_USER_LIST t
		LEFT JOIN SYS_AUTHZ_USER_ROLE_RELATION y ON y.U_ID = t.U_ID
	   WHERE t.U_ID = #{id}
	</select>
	
	<select id="getUserList" resultMap="UserMap" parameterType="java.lang.String" useCache="false">
		SELECT
			t.U_ID,
			t.U_UID,
			t.U_CODE,
			t.U_USERNAME,
			'******' AS U_PASSWORD,
			'******' AS U_SALT,
			'******' AS U_SECRET,
			t.U_ALIAS,
			t.U_AVATAR,
			t.U_PHONE,
			t.U_EMAIL,
			t.U_GENDER,
			t.U_BIRTHDAY,
			t.U_IDCARD,
			t.U_REMARK,
			t.U_STATUS,
			t.U_TIME24
		FROM SYS_AUTHZ_USER_LIST t INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.U_ID = x.U_ID
	   WHERE t.U_STATUS = 1
	</select>
	
	<select id="getPagedList" resultMap="UserMap" parameterType="AuthzUserModel" useCache="false">
		SELECT
			t.U_ID,
			t.U_UID,
			t.U_CODE,
			t.U_USERNAME,
			'******' AS U_PASSWORD,
			'******' AS U_SALT,
			'******' AS U_SECRET,
			t.U_ALIAS,
			t.U_AVATAR,
			t.U_PHONE,
			t.U_EMAIL,
			t.U_GENDER,
			t.U_BIRTHDAY,
			t.U_IDCARD,
			t.U_REMARK,
			t.U_STATUS,
			t.U_TIME24
		FROM SYS_AUTHZ_USER_LIST t
		LEFT JOIN SYS_AUTHZ_USER_ROLE_RELATION y ON y.U_ID = t.U_ID
	   WHERE t.U_USERNAME != 'admin'
		<if test="model.roleId != null and model.roleId != ''">
			and EXISTS (SELECT y.U_ID
				 FROM SYS_AUTHZ_USER_ROLE_RELATION y 
				WHERE y.U_ID = t.U_ID
				  AND y.R_ID = #{model.roleId}
			 )
		</if>
		<if test="model.status != null and model.status != ''">
			AND t.U_STATUS = #{model.status}
		</if>
		<if test="model.gender != null and model.gender != ''">
			AND t.U_GENDER = #{model.gender}
		</if>
		<if test="model.username != null and model.username != ''">
			AND t.U_USERNAME like '%'|| #{model.username} ||'%'
		</if>
	</select>
	
	<select id="getPagedAllocatedList" resultMap="RoleMap" parameterType="AuthzUserModel" useCache="false">
		SELECT
			t.R_ID,
			t.R_KEY,
			t.R_NAME,
			t.R_TYPE,
			t.R_INTRO,
			t.R_STATUS,
			(SELECT COUNT(x.R_ID) FROM SYS_AUTHZ_USER_ROLE_RELATION x WHERE x.R_ID = t.R_ID) as R_USERS,
			t.R_TIME24
		FROM SYS_AUTHZ_ROLE_LIST t INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.R_ID = x.R_ID
		WHERE x.U_ID = #{id}
		<if test="model.status != null and model.status != ''">
			and t.R_STATUS = #{model.status}
		</if>
		<if test="model.type != null and model.type != ''">
			and t.R_TYPE = #{model.type}
		</if>
		<if test="model.name != null and model.name != ''">
			and t.R_NAME like '%'|| #{model.name} ||'%'
		</if>
	</select>
	
	<select id="getPagedUnAllocatedList" resultMap="RoleMap" parameterType="AuthzUserModel" useCache="false">
		SELECT
			t.R_ID,
			t.R_KEY,
			t.R_NAME,
			t.R_TYPE,
			t.R_INTRO,
			t.R_STATUS,
			(SELECT COUNT(x.R_ID) FROM SYS_AUTHZ_USER_ROLE_RELATION x WHERE x.R_ID = t.R_ID) as R_USERS,
			t.R_TIME24
		FROM SYS_AUTHZ_ROLE_LIST t
		WHERE NOT EXISTS ( SELECT '1' FROM SYS_AUTHZ_USER_ROLE_RELATION z WHERE t.R_ID = z.R_ID and z.U_ID = #{id})
		<if test="model.status != null and model.status != ''">
			and t.R_STATUS = #{model.status}
		</if>
		<if test="model.type != null and model.type != ''">
			and t.R_TYPE = #{model.type}
		</if>
		<if test="model.name != null and model.name != ''">
			and t.R_NAME like '%'|| #{model.name} ||'%'
		</if>
	</select>
	
	<select id="getRoleKeys" resultType="java.lang.String" parameterType="java.lang.String" useCache="false">
		  SELECT t.R_ID
			FROM SYS_AUTHZ_ROLE_LIST t INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.R_ID = x.R_ID
		   WHERE t.R_STATUS = '1' 
			 AND x.U_ID = #{userId}
		ORDER BY x.R_PRTY DESC
	</select>
	
	<select id="getRoleList" resultMap="PairMap" useCache="false">
			SELECT
				t.R_ID,
				t.R_NAME
			FROM SYS_AUTHZ_ROLE_LIST t INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.R_ID = x.R_ID
		   WHERE t.R_STATUS = '1' 
			 AND x.U_ID = #{uid}
		ORDER BY t.R_NAME ASC
	</select>
	
	<select id="getRoles" resultMap="RoleMap" parameterType="java.lang.String" useCache="false">
			SELECT
				t.R_ID,
				t.R_KEY,
				t.R_NAME,
				t.R_TYPE,
				t.R_INTRO,
				t.R_STATUS,
				t.R_RESTRICT,
				t.R_TIME24
			FROM SYS_AUTHZ_ROLE_LIST t INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.R_ID = x.R_ID
		   WHERE t.R_STATUS = '1' 
			 AND x.U_ID = #{userId}
		ORDER BY t.R_NAME ASC
	</select>
	
	<select id="getPermissions" resultType="java.lang.String" parameterType="java.lang.String" useCache="false">
		SELECT DISTINCT y.PERMS
		FROM SYS_AUTHZ_ROLE_LIST t
		INNER JOIN SYS_AUTHZ_USER_ROLE_RELATION x ON t.R_ID = x.R_ID
		INNER JOIN SYS_AUTHZ_ROLE_PERMS y ON t.R_ID = y.R_ID
		WHERE x.U_ID = #{userId}
		ORDER BY x.R_PRTY ASC
	</select>
	
</mapper>