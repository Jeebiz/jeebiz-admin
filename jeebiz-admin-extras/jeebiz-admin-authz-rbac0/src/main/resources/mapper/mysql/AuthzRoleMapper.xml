<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.jeebiz.admin.authz.rbac0.dao.AuthzRoleMapper">
	
	<resultMap id="RoleMap" type="AuthzRoleModel">
		<!-- 角色id -->
		<result property="id" column="r_id" />
		<!-- 角色编码 -->
		<result property="key" column="r_key" />
		<!-- 角色名称 -->
		<result property="name" column="r_name" />
		<!-- 角色类型（1:原生|2:继承|3:复制|4:自定义） -->
		<result property="type" column="r_type" />
		<!-- 角色简介 -->
		<result property="intro" column="r_intro" />
		<!-- 角色状态（0:禁用|1:可用） -->
		<result property="status" column="r_status" />
		<!-- 角色已分配用户量 -->
		<result property="users" column="r_users" />
		<!-- 初始化时间 -->
		<result property="createTime" column="create_time"/>
		<!-- 角色授权的标记集合：将 perms list属性映射到collection : http://jaychang.iteye.com/blog/2357143 -->
        <collection property="perms" column="r_id" select="getPermsByRoleId">
            <result column="perm" />  
        </collection> 
	</resultMap>
	
	<resultMap id="UserMap" type="AuthzUserModel">
		<!-- 用户名称 -->
		<result property="id" column="u_id" />
		<!-- 用户名称 -->
        <result property="username" column="u_username"/>
        <!-- 用户密码 -->
        <result property="password" column="u_password"/>
        <!-- 用户密码盐：用于密码加解密 -->
        <result property="salt" column="u_salt"/>
        <!-- 用户秘钥：用于用户JWT加解密 -->
        <result property="secret" column="u_secret"/>

        <!-- 用户状态(0:不可用|1:正常|2:锁定) -->
        <result property="status" column="u_status"/>
        <!-- 初始化时间 -->
        <result property="createTime" column="create_time"/>
        <!-- 角色id（可能多个组合，如：1,2） -->
		<result property="roleId" column="r_id" />
		<!-- 角色名称（可能多个组合，如：角色1,角色2） -->
		<result property="roleName" column="r_name" />
	</resultMap>
	
	<resultMap id="PairMap" type="PairModel">
		<result property="key" column="r_id" />
		<result property="value" column="r_name" />
	</resultMap>
	
	<insert id="insert" parameterType="AuthzRoleModel" useGeneratedKeys="true" keyProperty="id"  flushCache="true">
		insert into sys_authz_role_list(r_key,r_name,r_type,r_intro,r_status)
		values(#{key},#{name},#{type},#{intro},'1')
	</insert>
	
	<delete id="delete" parameterType="java.lang.String" flushCache="true">
		DELETE FROM sys_authz_role_list WHERE r_id = #{id} AND r_key != 'admin'
	</delete>

	<delete id="batchDelete" parameterType="java.util.List" flushCache="true">
		DELETE FROM sys_authz_role_list WHERE r_id IN (
		<foreach collection="list" index="index" item="item" separator=",">
			#{item}
		</foreach>
		) AND r_key != 'admin'
	</delete>

	<update id="setStatus" parameterType="java.lang.String" flushCache="true">
		UPDATE sys_authz_role_list
		   SET r_status = #{status}
		 WHERE r_id = #{roleId}
		   AND r_key != 'admin'
	</update>
	
	<update id="resetPrty" parameterType="java.lang.String" flushCache="true">
	   	DECLARE
	   	BEGIN
			UPDATE sys_authz_user_role_relation
			   SET r_prty = 0
			 WHERE u_id = #{userId};
			UPDATE sys_authz_user_role_relation
			   SET r_prty = 1
			 WHERE r_id = #{roleId}
			   AND u_id = #{userId};
		END;			   
	</update>
	
	<update id="update" parameterType="AuthzRoleModel" flushCache="true">
		update sys_authz_role_list t
		<set>
			<if test="name != null and name != ''">t.r_name = #{name},</if>
			<if test="type != null and type != ''">t.r_type = #{type},</if>
			<if test="intro != null and intro != ''">t.r_intro = #{intro},</if>
			<if test="status != null and status != ''">t.r_status = #{status}</if>
		</set>
		where t.r_id = #{id}
		  AND t.r_key != 'admin'
	</update>
	
	<select id="getCountByName" resultType="int" parameterType="java.lang.String" useCache="true">
		SELECT count(t.r_id)
		  FROM sys_authz_role_list t
		 WHERE t.r_name = #{name}
		 <if test="origin != null and origin != ''">
		   AND t.r_id != #{origin}
		 </if>
	</select>
	
	<select id="getCountByUid" resultType="int" parameterType="java.lang.String">
		SELECT count(t.u_id) FROM sys_authz_user_role_relation t WHERE t.r_id = #{uid}
	</select>
	
	<select id="getRoles" resultMap="RoleMap" useCache="true">
		SELECT
			t.r_id,
			t.r_key,
			t.r_name,
			t.r_type,
			t.r_intro,
			t.r_status,
			t.create_time
		FROM sys_authz_role_list t
	</select>
	
	<select id="getUserRoles" resultMap="RoleMap" useCache="false">
		SELECT
			t.r_id,
			t.r_key,
			t.r_name,
			t.r_type,
			t.r_intro,
			t.r_status,
			t.create_time
		FROM sys_authz_role_list t INNER JOIN sys_authz_user_role_relation x ON t.r_id = x.r_id
		WHERE x.u_id = #{userId}
	</select>
	
	<select id="getPermsByRoleId" resultType="string" useCache="true">  
        SELECT x.perms FROM sys_authz_role_perms x WHERE x.r_id = #{id}
    </select>
	
	<select id="getModel" resultMap="RoleMap" parameterType="java.lang.String" useCache="true">
		SELECT
			t.r_id,
			t.r_key,
			t.r_name,
			t.r_type,
			t.r_intro,
			t.r_status,
			(SELECT COUNT(x.r_id) FROM sys_authz_user_role_relation x WHERE x.r_id = t.r_id) as r_users,
			t.create_time
		FROM sys_authz_role_list t
	   WHERE t.r_id = #{id}
	     AND t.r_key != 'admin'
	</select>
	
	<select id="getPagedList" resultMap="RoleMap" parameterType="AuthzRoleModel" useCache="false">
		SELECT
			t.r_id,
			t.r_key,
			t.r_name,
			t.r_type,
			t.r_intro,
			t.r_status,
			(SELECT COUNT(x.r_id) FROM sys_authz_user_role_relation x WHERE x.r_id = t.r_id) as r_users,
			t.create_time
		FROM sys_authz_role_list t
	   WHERE t.r_key != 'admin'
		<if test="model.status != null and model.status != ''">
			and t.r_status = #{model.status}
		</if>
		<if test="model.type != null and model.type != ''">
			and t.r_type = #{model.type}
		</if>
		<if test="model.name != null and model.name != ''">
			and t.r_name like CONCAT('%',#{model.name},'%')
		</if>
	</select>

	<insert id="setUsers" flushCache="true">
    	insert into sys_authz_user_role_relation(r_id,u_id)
    	values <foreach collection="userIds" item="item" separator =",">
		(#{roleId},#{item})
        </foreach>
    </insert>
    
    <insert id="setUsersByKey" flushCache="true">
    	insert into sys_authz_user_role_relation(r_id,u_id)
    	values <foreach collection="userIds" item="item" separator =",">
		((SELECT x.r_id FROM sys_authz_role_list x WHERE x.r_key = #{roleKey}),#{item})
        </foreach>
    </insert>
    
    <delete id="deleteUsers" flushCache="true">
    	DELETE FROM sys_authz_user_role_relation WHERE r_id = #{roleId} AND r_key != 'admin'
    	<foreach collection="userIds" item="item" separator =" OR " open=" AND ( " close=")">
		u_id = #{item}
        </foreach>
    </delete>
    
	<select id="getPagedAllocatedList" resultMap="UserMap" parameterType="AuthzRoleModel" useCache="false">
		SELECT
			t.u_id,
			t.u_username,
			'******' AS u_password,
			t.u_avatar,
			t.u_phone,
			t.u_email,
			t.U_REMARK,
			t.u_status,
			t.create_time
		FROM sys_authz_user_list t INNER JOIN sys_authz_user_role_relation x ON t.u_id = x.u_id
		WHERE x.r_id = #{model.id}
		<if test="model.status != null and model.status != ''">
			and t.u_status = #{model.status}
		</if>
		<if test="model.username != null and model.username != ''">
			and t.u_username like CONCAT('%',#{model.username},'%')
		</if>
	</select>
	
	<select id="getPagedUnAllocatedList" resultMap="UserMap" parameterType="AuthzRoleModel" useCache="false">
		SELECT
			t.u_id,
			t.u_username,
			'******' AS u_password,
			t.u_avatar,
			t.u_phone,
			t.u_email,
			t.U_REMARK,
			t.u_status,
			t.create_time
		FROM sys_authz_user_list t
		WHERE NOT EXISTS ( SELECT '1' FROM sys_authz_user_role_relation z WHERE t.u_id = z.u_id and z.r_id = #{id} )
		<if test="model.status != null and model.status != ''">
			and t.u_status = #{model.status}
		</if>
		<if test="model.username != null and model.username != ''">
			and t.u_username like CONCAT('%',#{model.username},'%')
		</if>
	</select>
	
	
	<select id="getPairList" resultMap="PairMap" parameterType="java.lang.String" useCache="false">
		 SELECT t.r_id,
				t.r_name
		FROM sys_authz_role_list t
	   WHERE t.r_status = 1
		ORDER BY t.create_time DESC
	</select>
	
</mapper>